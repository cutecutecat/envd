name: CI

on:
  push:
    branches:
      - main
    paths:
      - '.github/workflows/**'
      - '**.go'
      - 'Makefile'
      - 'go.**'
  pull_request:
    paths:
      - '.github/workflows/**'
      - '**.go'
      - 'Makefile'
      - 'go.**'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint:
    name: lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-go@v3
        with:
          go-version: 1.18
      - uses: actions/checkout@v3
      - name: Cache Go modules
        uses: actions/cache@preview
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-build-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.OS }}-build-${{ env.cache-name }}-
            ${{ runner.OS }}-build-
            ${{ runner.OS }}-
      - name: Add license
        run: |
          make addlicense && git add pkg cmd &&
          git diff --cached --exit-code || (echo 'Please run "make addlicense" to verify govet' && exit 1);
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          args: --timeout=5m
          version: latest
          # Ref https://github.com/golangci/golangci-lint-action/issues/244
          skip-pkg-cache: true
  test:
    name: test
    env:
      # Disable telemetry.
      ENVD_ANALYTICS: false
    strategy:
      matrix:
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Check out code
        uses: actions/checkout@v3
      - name: Setup Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.18
      - name: Cache Go modules
        uses: actions/cache@preview
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-build-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.OS }}-build-${{ env.cache-name }}-
            ${{ runner.OS }}-build-
            ${{ runner.OS }}-
      - name: Verify mockgen
        run: |
          make generate && git add pkg &&
          git diff --cached --exit-code || (echo 'Please run "make generate" to verify generate' && exit 1);
      - name: Test
        run: make test
      - name: Upload coverage report
        uses: actions/upload-artifact@v3
        with:
          name: coverage-out
          path: coverage.out
  e2e-test:
    name: e2e-test
    env:
      # Disable telemetry.
      ENVD_ANALYTICS: false
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        ci_index: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
        ci_total: [16]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Check out code
        uses: actions/checkout@v3
      - name: Setup Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.18
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Get ginkgo cli
        run: |
          go install -mod=mod github.com/onsi/ginkgo/v2/ginkgo@latest
          ginkgo version
      - name: Cache Go modules
        uses: actions/cache@preview
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-build-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.OS }}-build-${{ env.cache-name }}-
            ${{ runner.OS }}-build-
            ${{ runner.OS }}-
      - uses: actions-ecosystem/action-get-latest-tag@v1
        id: get-latest-tag
      - name: Login to GitHub Container Registry
        if: ${{ env.EXPORT_CACHE != '' }}
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ secrets.TEST_CACHE_BOT }}
          password: ${{ secrets.TEST_CACHE_BOT_TOKEN }}
        env:
         EXPORT_CACHE: ${{ secrets.TEST_CACHE_BOT }}
      - name: e2e test unsafe mode (only import cache)
        if: ${{ env.EXPORT_CACHE == '' }}
        run: python3 ./hack/run_test_job_balance.py $INDEX $TOTAL
        env:
          INDEX: ${{ matrix.ci_index }}
          TOTAL: ${{ matrix.ci_total }}
          EXPORT_CACHE: ${{ secrets.TEST_CACHE_BOT }}
      - name: e2e test safe mode (import and export cache)
        if: ${{ env.EXPORT_CACHE != '' }}
        run: python3 ./hack/run_test_job_balance.py $INDEX $TOTAL --export-cache
        env:
          INDEX: ${{ matrix.ci_index }}
          TOTAL: ${{ matrix.ci_total }}
          EXPORT_CACHE: ${{ secrets.TEST_CACHE_BOT }}
      - name: Upload coverage report
        uses: actions/upload-artifact@v3
        with:
          name: e2e-${{ env.INDEX }}-coverage-out
          path: e2e-${{ env.INDEX }}-coverage.out
        env:
          INDEX: ${{ matrix.ci_index }}
  build:
    name: build
    env:
      # Disable telemetry.
      ENVD_ANALYTICS: false
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Check out code
        uses: actions/checkout@v3
      - name: Setup Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.18
      - name: Cache Go modules
        uses: actions/cache@preview
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-build-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.OS }}-build-${{ env.cache-name }}-
            ${{ runner.OS }}-build-
            ${{ runner.OS }}-
      - name: Build
        run: make

  # notifies that all test jobs are finished.
  report:
    needs:
      - test
      - e2e-test
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3
      - name: Setup Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.18
      - name: Install bins
        run: |
          go install github.com/mattn/goveralls@latest
      - name: Get coverage report
        uses: actions/download-artifact@v3
        with:
          path: merge
      - name: Move all sub-directory coverage to top
        # download-artifact will create sub-directory for download all
        run: |
          cp -r merge/*/*.out merge
          rm -r -- merge/*/
      - name: Merge all coverage reports
        uses: cutecutecat/go-cover-merge@v1
        with:
          input_dir: merge
          output_file: final.out
      - name: Send coverage
        env:
          COVERALLS_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          goveralls -coverprofile=final.out -service=github
